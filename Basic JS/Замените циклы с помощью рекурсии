Рекурсия — это концепция, согласно которой функция может быть выражена через саму себя.
Чтобы это понять, начните со следующей задачи: умножьте первые nэлементы массива, чтобы получить произведение этих элементов.
Используя forцикл, вы можете сделать это:

  function multiply(arr, n) {
    let product = 1;
    for (let i = 0; i < n; i++) {
      product *= arr[i];
    }
    return product;
  }
Однако обратите внимание на это multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]. 
Это означает, что вы можете переписать код multiplyсам по себе, и вам никогда не понадобится использовать цикл.

  function multiply(arr, n) {
    if (n <= 0) {
      return 1;
    } else {
      return multiply(arr, n - 1) * arr[n - 1];
    }
  }
Рекурсивная версия multiplyломается следующим образом. В базовом случае , где n <= 0, он возвращает 1. При больших значениях nон вызывает себя, но с n - 1. 
Этот вызов функции оценивается таким же образом, вызывая multiplyснова до тех пор, пока n <= 0. 
На этом этапе все функции могут вернуться, а оригинал multiplyвозвращает ответ.

Примечание. Рекурсивные функции должны иметь базовый случай, когда они возвращаются без повторного вызова функции (в этом примере, когда n <= 0), иначе они никогда не смогут завершить выполнение.

Напишите рекурсивную функцию, sum(arr, n)которая возвращает сумму первых nэлементов массива arr.
function sum(arr, n) {
  // Only change code below this line
    if (n <= 0) {
      return 0;
    } else {
      return sum(arr, n - 1) + arr[n - 1];
    }

  // Only change code above this line
}
